# name: Build and Deploy to ECR And Run Container

# on:
 
#   push:
#     branches: [ "Testing" ]

# jobs:

#   build_docker_image:
#     runs-on: ubuntu-latest

#     env:
#       IMAGE_TAG: v${{ github.run_number }}

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3
    
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4.0.1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-southeast-1

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2.0.1
          
#       - name: Build Docker Image
#         env:
#           PROD_TESTENV_FILE: ${{ secrets.PROD_TESTENV_FILE }}
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ambel-test
#           IMAGE_TAG: F-${{ env.IMAGE_TAG }}
          
#         run: |
#           echo "$PROD_TESTENV_FILE" > .env.local
#           docker build -t ambel-frontend .
#           docker image tag ambel-frontend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#       - name: Replace IMAGE_TAG placeholder in task definition
#         run: |
#           sed -i "s/\$IMAGE_TAG/F-${{ env.IMAGE_TAG }}/g" task-definition.json
      
#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: task-definition.json 
#           container-name: frontend
#           image: 172039021862.dkr.ecr.ap-southeast-1.amazonaws.com/ambel-test:F-${{ env.IMAGE_TAG }}   
#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: frontend 
#           cluster: Ambel-Test
#           wait-for-service-stability: true