##########################################################################################
# Docker build ci-cd pipeline and push dockerhub                                         #
##########################################################################################

name: Docker Build CI

on:
  push:
    branches: [ "Testing" ]

jobs:

  build_docker_image:
    runs-on: ubuntu-latest

#To generate serial Version Number    
    env:
      IMAGE_TAG: v${{ github.run_number }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Compose
        uses: docker/compose-cli@v1.0.35
        with:
          file: docker-compose.yml

      - name: Build Docker Image
        run: |
          docker compose build
          docker image tag currentname:tag DockerHubUsername/Repositoryname:versionName${{ env.IMAGE_TAG }}

      - name: Push Docker Image
        run: docker push DockerHubUsername/Repositoryname:versionName${{ env.IMAGE_TAG }}



##########################################################################################
# Docker build ci-cd pipeline and push dockehub and deploy EC2 using Action runner       #
##########################################################################################



name: Docker CI/CD Build and deploy

on:
  push:
    branches: [ "Testing" ]

jobs:

  build_docker_image:
    runs-on: ubuntu-latest

#To generate serial Version Number to each build
    env:
      IMAGE_TAG: v${{ github.run_number }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Compose
        uses: docker/compose-cli@v1.0.35
        with:
          file: docker-compose.yml

      - name: Build Docker Image
        run: |
          docker compose build
          docker image tag currentname:tag ${{ secrets.DOCKERHUB_USERNAME }}/Repositoryname:versionName${{ env.IMAGE_TAG }}

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/Repositoryname:versionName${{ env.IMAGE_TAG }}


  deploy_docker_image:
    
    needs: build_docker_image
    runs-on: [self-hosted, docker_deploy]

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: pull image from docker hub
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/Repositoryname:versionName${{ env.IMAGE_TAG }}

      - name: stop the previous container if available
        run: docker stop GivenName || true

      - name: Remove the previous container
        run: docker rm GivenName || true

      - name: start current pulled image
        run: docker run -d -p 3000:3000 --name GivenName ${{ secrets.DOCKERHUB_USERNAME }}/Repositoryname:versionName${{ env.IMAGE_TAG }}

# If the deployment proceeds without an action-runner, use the direct access key of EC2 Instance
    steps:
      - name: Deploy to EC2 Instance
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            docker stop GivenName || true
            docker rm GivenName || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/Repositoryname:versionName${{ env.IMAGE_TAG }}
            docker run -d -p 3000:3000 --name GivenName ${{ secrets.DOCKERHUB_USERNAME }}Repositoryname:versionName${{ env.IMAGE_TAG }}


##########################################################################################
# Docker build ci-cd pipeline and push Amazon ECR                                        #
##########################################################################################

name: Build & Deploy to ECR

on:
  push:
    branches: ['main']

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ecr_image_name
        IMAGE_TAG: ecr_image_tag
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG